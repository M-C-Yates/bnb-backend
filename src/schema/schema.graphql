type Query {
	users(
		query: String
		first: Int
		skip: Int
		after: ID
		orderBy: UserOrderByInput
	): [User!]!
	listings(
		query: String
		first: Int
		skip: Int
		after: ID
		orderBy: UserOrderByInput
	): [Listing!]!
	reviews(
		first: Int
		skip: Int
		after: ID
		orderBy: UserOrderByInput
	): [Review!]!
}

type Mutation {
	createUser(data: CreateUserInput): AuthPayload!
	loginUser(data: LoginUserInput): AuthPayload!
	updateUser(data: UpdateUserInput!): User!
	deleteUser: User!
	createListing(data: CreateListingInput): Listing!
	updateListing(id: ID!, data: UpdateListingInput!): Listing!
	deleteListing(id: ID!): Listing!
	createReview(data: CreateReviewInput): Review!
	updateReview(id: ID!, data: UpdateReviewInput): Review!
	deleteReview(id: ID!): Review!
}

input CreateUserInput {
	name: String!
	email: String!
	password: String!
}

type AuthPayload {
	token: String!
	user: User!
}

input LoginUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	name: String
	email: String
	password: String
}

input CreateListingInput {
	name: String!
	category: ListingCategory
	hero: String!
	gallery: [String!]!
	description: String!
	price: Int!
	guests: Int!
	beds: Int!
	baths: Int!
	amenities: String
	published: Boolean!
}

input UpdateListingInput {
	name: String!
	category: ListingCategory
	hero: String!
	gallery: [String!]!
	description: String!
	price: Int!
	guests: Int!
	beds: Int!
	baths: Int!
	amenities: String
	published: Boolean!
}

input CreateReviewInput {
	text: String!
	author: ID!
	post: ID!
}
input UpdateReviewInput {
	text: String
}

type User {
	id: ID!
	name: String!
	email: String!
	password: String!
	listings: [Listing!]!
	reviews: [Review!]!
	createdAt: String!
	updatedAt: String!
}

type Review {
	id: ID!
	author: User!
	Listing: Listing!
	rating: Float!
	text: String!
	createdAt: String!
	updatedAt: String!
}

type Listing {
	id: ID!
	author: User!
	reviews: [Review!]!
	name: String!
	category: ListingCategory
	hero: String!
	gallery: [String!]!
	description: String!
	price: Int!
	guests: Int!
	beds: Int!
	baths: Int!
	amenities: String
	published: Boolean!
	createdAt: String!
	updatedAt: String!
}

enum ListingCategory {
	Entire_Apartment
	Entire_House
	Entire_Villa
	Boat
	Private_Room
	Shared_Room
}

enum UserOrderByInput {
	id_ASC
	id_DESC
	name_ASC
	name_DESC
	email_ASC
	email_DESC
	password_ASC
	password_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}
