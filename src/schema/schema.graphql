scalar Upload

type Query {
	users(
		query: String
		first: Int
		skip: Int
		after: ID
		orderBy: UserOrderByInput
	): [User]!
	listings(
		query: String
		first: Int
		skip: Int
		after: ID
		orderBy: ListingOrderByInput
	): [Listing]!
	reviews(
		first: Int
		skip: Int
		after: ID
		orderBy: UserOrderByInput
	): [Review]!
	mylistings(first: Int, skip: Int, after: ID, orderBy: ListingOrderByInput): [Listing!]!
	mybookings(
		first: Int
		skip: Int
		after: ID
		orderBy: BookingOrderByInput
	): [Booking]!
	listing(id: ID!): Listing!
}

type Mutation {
	createBooking(listing: ID!, data: CreateBookingInput): Booking!
	updateBooking(id: ID!, data: UpdateBookingInput): Booking!
	deleteBooking(id: ID!): Booking!
	createListing(data: CreateListingInput): Listing!
	updateListing(id: ID!, data: UpdateListingInput): Listing!
	deleteListing(id: ID!): Listing!
	createReview(data: CreateReviewInput): Review!
	updateReview(id: ID!, data: UpdateReviewInput): Review!
	deleteReview(id: ID!): Review!
	createUser(data: CreateUserInput!): AuthPayload!
	loginUser(data: LoginUserInput): AuthPayload!
	updateUser(data: UpdateUserInput!): User!
	deleteUser: User!
}

input CreateBookingInput {
	startDate: String!
	endDate: String!
}

input UpdateBookingInput {
	startDate: String
	endDate: String
}

input CreateUserInput {
	name: String!
	email: String!
	password: String!
}

type AuthPayload {
	token: String!
	user: User!
}

input LoginUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	name: String
	email: String
	password: String
}

input CreateListingInput {
	name: String!
	category: String
	hero: Upload
	description: String
	price: Int!
	guests: Int
	beds: Int
	baths: Int
	amenities: String
	published: Boolean!
}

input UpdateListingInput {
	name: String
	category: String
	hero: Upload
	description: String
	price: Int
	guests: Int
	beds: Int
	baths: Int
	amenities: String
	published: Boolean
}

input CreateReviewInput {
	text: String!
	author: ID!
	listing: ID!
}
input UpdateReviewInput {
	text: String
}

type User {
	id: ID!
	name: String!
	email: String!
	password: String!
	listings: [Listing!]!
	reviews: [Review!]!
	booking: Booking!
	createdAt: String!
	updatedAt: String!
}

type Review {
	id: ID!
	author: User!
	Listing: Listing!
	rating: Float!
	text: String!
	createdAt: String!
	updatedAt: String!
}

type Listing {
	id: ID!
	author: User!
	reviews: [Review!]!
	booking: Booking
	name: String
	category: String
	heroUrl: String
	hero: Upload
	description: String
	price: Int
	guests: Int
	beds: Int
	baths: Int
	amenities: String
	published: Boolean!
	createdAt: String!
	updatedAt: String!
}

type Booking {
	id: ID!
	author: User!
	listing: Listing!
	startDate: String!
	endDate: String!
}

enum UserOrderByInput {
	id_ASC
	id_DESC
	name_ASC
	name_DESC
	email_ASC
	email_DESC
	password_ASC
	password_DESC
	createdAt_ASC
	createdAt_DESC
	updatedAt_ASC
	updatedAt_DESC
}

enum ListingOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
  hero_ASC
  hero_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  guests_ASC
  guests_DESC
  beds_ASC
  beds_DESC
  baths_ASC
  baths_DESC
  amenities_ASC
  amenities_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum BookingOrderByInput {
	id_ASC
	id_DESC
	startDate_ASC
	startDate_DESC
	endDate_ASC
	endDate_DESC
}
